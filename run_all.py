# -*- coding: utf-8 -*-
"""
Run All - Consolidated Central Project Data

Script maestro para ejecutar todo el proceso de consolidaci√≥n.
Proporciona una interfaz unificada para diferentes comandos.
"""

import sys
import os
from datetime import datetime

def show_help():
    """Muestra ayuda del script"""
    print("üöÄ CONSOLIDATED CENTRAL PROJECT DATA")
    print("="*50)
    print("Script maestro para ejecutar el proceso de consolidaci√≥n")
    print()
    print("USO:")
    print("  python run_all.py <comando>")
    print()
    print("COMANDOS DISPONIBLES:")
    print("  test        - Ejecutar an√°lisis de prueba (tabla individual)")
    print("  silver      - Generar vistas Silver para todas las tablas")
    print("  consolidated - Generar vistas consolidadas centrales")
    print("  all         - Ejecutar proceso completo")
    print("  config      - Mostrar configuraci√≥n actual")
    print("  help        - Mostrar esta ayuda")
    print()
    print("EJEMPLOS:")
    print("  python run_all.py test")
    print("  python run_all.py silver")
    print("  python run_all.py all")
    print()

def show_config():
    """Muestra la configuraci√≥n actual"""
    print("‚öôÔ∏è  CONFIGURACI√ìN ACTUAL")
    print("="*50)
    
    try:
        import config
        
        print(f"Proyecto fuente: {config.PROJECT_SOURCE}")
        print(f"Proyecto central: {config.CENTRAL_PROJECT}")
        print(f"Dataset: {config.DATASET_NAME}")
        print(f"Tabla: {config.TABLE_NAME}")
        print(f"Campos metadata: {len(config.METADATA_FIELDS)}")
        
        if hasattr(config, 'MAX_COMPANIES_FOR_TEST'):
            print(f"L√≠mite compa√±√≠as (test): {config.MAX_COMPANIES_FOR_TEST}")
        
        print()
        print("Archivos de configuraci√≥n encontrados:")
        config_files = ['config.py', 'requirements.txt']
        for file in config_files:
            if os.path.exists(file):
                print(f"  ‚úÖ {file}")
            else:
                print(f"  ‚ùå {file}")
                
    except Exception as e:
        print(f"‚ùå Error cargando configuraci√≥n: {e}")

def run_test():
    """Ejecuta an√°lisis de prueba"""
    print("üß™ EJECUTANDO AN√ÅLISIS DE PRUEBA")
    print("="*50)
    
    try:
        import test_single_table_analysis
        result = test_single_table_analysis.main()
        
        if result:
            print("\n‚úÖ An√°lisis de prueba completado exitosamente")
        else:
            print("\n‚ùå An√°lisis de prueba fall√≥")
            
        return result
        
    except Exception as e:
        print(f"‚ùå Error ejecutando an√°lisis de prueba: {e}")
        return False

def run_silver():
    """Ejecuta generaci√≥n de vistas Silver"""
    print("üîß GENERANDO VISTAS SILVER")
    print("="*50)
    
    try:
        import generate_silver_views
        result = generate_silver_views.generate_all_silver_views()
        
        if result:
            print("\n‚úÖ Generaci√≥n de vistas Silver completada")
        else:
            print("\n‚ùå Generaci√≥n de vistas Silver fall√≥")
            
        return result
        
    except Exception as e:
        print(f"‚ùå Error generando vistas Silver: {e}")
        return False

def run_consolidated():
    """Ejecuta generaci√≥n de vistas consolidadas"""
    print("üîó GENERANDO VISTAS CONSOLIDADAS")
    print("="*50)
    
    try:
        import generate_central_consolidated_views
        result = generate_central_consolidated_views.generate_all_consolidated_views()
        
        if result:
            print("\n‚úÖ Generaci√≥n de vistas consolidadas completada")
        else:
            print("\n‚ùå Generaci√≥n de vistas consolidadas fall√≥")
            
        return result
        
    except Exception as e:
        print(f"‚ùå Error generando vistas consolidadas: {e}")
        return False

def run_all():
    """Ejecuta proceso completo"""
    print("üöÄ EJECUTANDO PROCESO COMPLETO")
    print("="*50)
    print("Este proceso ejecutar√° todas las etapas de consolidaci√≥n")
    print(f"Inicio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    results = {}
    
    # Etapa 1: An√°lisis de prueba
    print("ETAPA 1: An√°lisis de prueba")
    results['test'] = run_test()
    print()
    
    if not results['test']:
        print("‚ùå Proceso detenido: An√°lisis de prueba fall√≥")
        return False
    
    # Etapa 2: Generaci√≥n Silver
    print("ETAPA 2: Generaci√≥n de vistas Silver")
    results['silver'] = run_silver()
    print()
    
    if not results['silver']:
        print("‚ùå Proceso detenido: Generaci√≥n Silver fall√≥")
        return False
    
    # Etapa 3: Generaci√≥n Consolidada
    print("ETAPA 3: Generaci√≥n de vistas consolidadas")
    results['consolidated'] = run_consolidated()
    print()
    
    # Resumen final
    print("üìä RESUMEN DEL PROCESO COMPLETO")
    print("="*50)
    
    total_stages = len(results)
    successful_stages = sum(results.values())
    
    for stage, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {stage.upper()}")
    
    print(f"\nEtapas completadas: {successful_stages}/{total_stages}")
    print(f"Tasa de √©xito: {(successful_stages/total_stages)*100:.1f}%")
    
    if successful_stages == total_stages:
        print(f"\nüéØ ¬°PROCESO COMPLETADO EXITOSAMENTE!")
        print(f"üí° Todas las etapas se ejecutaron correctamente.")
    else:
        print(f"\n‚ö†Ô∏è  PROCESO COMPLETADO CON ERRORES")
        print(f"üí° Revisa los errores arriba antes de continuar.")
    
    print(f"Fin: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    return successful_stages == total_stages

def main():
    """Funci√≥n principal"""
    if len(sys.argv) < 2:
        show_help()
        return
    
    command = sys.argv[1].lower()
    
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    if command == "help":
        show_help()
    elif command == "config":
        show_config()
    elif command == "test":
        run_test()
    elif command == "silver":
        run_silver()
    elif command == "consolidated":
        run_consolidated()
    elif command == "all":
        run_all()
    else:
        print(f"‚ùå Comando desconocido: {command}")
        print("üí° Usa 'python run_all.py help' para ver comandos disponibles")

if __name__ == "__main__":
    main()
