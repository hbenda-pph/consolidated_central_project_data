# -*- coding: utf-8 -*-
"""
Cloud Shell Setup - Consolidated Central Project Data

Script de configuraci√≥n e instalaci√≥n para Cloud Shell.
Verifica y configura el entorno necesario para ejecutar el proceso de consolidaci√≥n.
"""

import sys
import os
import subprocess
import json
from pathlib import Path

def run_command(command, description, check_output=False):
    """Ejecuta un comando y maneja errores"""
    print(f"üîÑ {description}...")
    try:
        if check_output:
            result = subprocess.run(command, shell=True, capture_output=True, text=True, check=True)
            return True, result.stdout.strip()
        else:
            result = subprocess.run(command, shell=True, check=True)
            return True, ""
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error: {e}")
        return False, str(e)
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False, str(e)

def check_gcloud_auth():
    """Verifica autenticaci√≥n de gcloud"""
    print("\nüîê Verificando autenticaci√≥n de gcloud...")
    
    # Verificar si gcloud est√° instalado
    success, output = run_command("gcloud --version", "Verificando gcloud", True)
    if not success:
        print("‚ùå gcloud no est√° instalado o no est√° en PATH")
        return False
    
    print(f"‚úÖ gcloud versi√≥n: {output.split()[0]}")
    
    # Verificar autenticaci√≥n
    success, output = run_command("gcloud auth list --filter=status:ACTIVE --format='value(account)'", 
                                 "Verificando autenticaci√≥n", True)
    if not success or not output:
        print("‚ùå No hay cuentas autenticadas activas")
        print("üí° Ejecuta: gcloud auth login")
        return False
    
    print(f"‚úÖ Autenticado como: {output}")
    return True

def check_gcloud_config():
    """Verifica configuraci√≥n de gcloud"""
    print("\n‚öôÔ∏è  Verificando configuraci√≥n de gcloud...")
    
    # Verificar proyecto configurado
    success, project = run_command("gcloud config get-value project", 
                                  "Obteniendo proyecto configurado", True)
    if not success or not project:
        print("‚ùå No hay proyecto configurado")
        print("üí° Ejecuta: gcloud config set project YOUR_PROJECT_ID")
        return False
    
    print(f"‚úÖ Proyecto configurado: {project}")
    
    # Verificar regi√≥n
    success, region = run_command("gcloud config get-value compute/region", 
                                 "Obteniendo regi√≥n configurada", True)
    if success and region:
        print(f"‚úÖ Regi√≥n configurada: {region}")
    else:
        print("‚ö†Ô∏è  Regi√≥n no configurada (opcional)")
    
    return True

def check_python_environment():
    """Verifica el entorno de Python"""
    print("\nüêç Verificando entorno de Python...")
    
    # Verificar versi√≥n de Python
    python_version = sys.version_info
    print(f"‚úÖ Python versi√≥n: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 7):
        print("‚ùå Se requiere Python 3.7 o superior")
        return False
    
    # Verificar pip
    success, output = run_command("pip --version", "Verificando pip", True)
    if not success:
        print("‚ùå pip no est√° disponible")
        return False
    
    print(f"‚úÖ pip versi√≥n: {output}")
    return True

def install_dependencies():
    """Instala dependencias de Python"""
    print("\nüì¶ Instalando dependencias de Python...")
    
    # Verificar si requirements.txt existe
    if not os.path.exists("requirements.txt"):
        print("‚ùå Archivo requirements.txt no encontrado")
        return False
    
    # Instalar dependencias
    success, output = run_command("pip install -r requirements.txt", 
                                 "Instalando dependencias")
    if not success:
        print("‚ùå Error instalando dependencias")
        return False
    
    print("‚úÖ Dependencias instaladas exitosamente")
    return True

def verify_bigquery_access():
    """Verifica acceso a BigQuery"""
    print("\nüîç Verificando acceso a BigQuery...")
    
    try:
        # Intentar importar la librer√≠a
        from google.cloud import bigquery
        print("‚úÖ Librer√≠a google-cloud-bigquery importada correctamente")
        
        # Intentar crear cliente (esto verificar√° autenticaci√≥n)
        client = bigquery.Client()
        print("‚úÖ Cliente BigQuery creado exitosamente")
        
        # Verificar permisos b√°sicos
        try:
            # Listar datasets (operaci√≥n b√°sica)
            datasets = list(client.list_datasets(max_results=1))
            print("‚úÖ Permisos de lectura verificados")
        except Exception as e:
            print(f"‚ö†Ô∏è  Permisos de lectura limitados: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error importando BigQuery: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error accediendo a BigQuery: {e}")
        return False

def create_directories():
    """Crea directorios necesarios"""
    print("\nüìÅ Creando directorios necesarios...")
    
    directories = [
        "execution_sessions",
        "logs",
        "output"
    ]
    
    for directory in directories:
        try:
            os.makedirs(directory, exist_ok=True)
            print(f"‚úÖ Directorio creado/verificado: {directory}")
        except Exception as e:
            print(f"‚ùå Error creando directorio {directory}: {e}")
            return False
    
    return True

def verify_config_file():
    """Verifica archivo de configuraci√≥n"""
    print("\n‚öôÔ∏è  Verificando archivo de configuraci√≥n...")
    
    if not os.path.exists("config.py"):
        print("‚ùå Archivo config.py no encontrado")
        return False
    
    try:
        # Intentar importar configuraci√≥n
        import config
        print("‚úÖ Archivo config.py importado correctamente")
        
        # Verificar configuraciones cr√≠ticas
        required_configs = [
            'PROJECT_SOURCE',
            'DATASET_NAME', 
            'TABLE_NAME',
            'METADATA_FIELDS'
        ]
        
        for config_name in required_configs:
            if hasattr(config, config_name):
                print(f"‚úÖ Configuraci√≥n encontrada: {config_name}")
            else:
                print(f"‚ùå Configuraci√≥n faltante: {config_name}")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error importando configuraci√≥n: {e}")
        return False

def run_basic_test():
    """Ejecuta prueba b√°sica del sistema"""
    print("\nüß™ Ejecutando prueba b√°sica...")
    
    try:
        # Importar m√≥dulos de prueba
        import test_single_table_analysis
        import generate_silver_views
        import analyze_data_types
        import diagnostic_test
        
        print("‚úÖ M√≥dulos de prueba importados correctamente")
        print("üí° Para ejecutar diagn√≥stico completo, usa: python diagnostic_test.py")
        print("üí° Para ejecutar prueba completa, usa: python cloud_shell_runner.py test")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en prueba b√°sica: {e}")
        return False

def generate_setup_report(results):
    """Genera reporte de configuraci√≥n"""
    print("\nüìä REPORTE DE CONFIGURACI√ìN")
    print("=" * 50)
    
    total_checks = len(results)
    passed_checks = sum(results.values())
    
    print(f"Verificaciones realizadas: {total_checks}")
    print(f"Verificaciones exitosas: {passed_checks}")
    print(f"Verificaciones fallidas: {total_checks - passed_checks}")
    print(f"Tasa de √©xito: {(passed_checks/total_checks)*100:.1f}%")
    
    print(f"\nDetalles:")
    for check_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {check_name}")
    
    if passed_checks == total_checks:
        print(f"\nüéØ ¬°Configuraci√≥n completada exitosamente!")
        print(f"üí° Puedes proceder con: python cloud_shell_runner.py test")
    else:
        print(f"\n‚ö†Ô∏è  Configuraci√≥n incompleta. Revisa los errores arriba.")
        print(f"üí° Una vez corregidos, ejecuta este script nuevamente.")

def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üöÄ CONFIGURACI√ìN DE CLOUD SHELL")
    print("=" * 50)
    print("Este script verificar√° y configurar√° el entorno necesario")
    print("para ejecutar el proceso de consolidaci√≥n de datos.")
    print()
    
    results = {}
    
    # Ejecutar verificaciones
    results["Autenticaci√≥n gcloud"] = check_gcloud_auth()
    results["Configuraci√≥n gcloud"] = check_gcloud_config()
    results["Entorno Python"] = check_python_environment()
    results["Dependencias Python"] = install_dependencies()
    results["Acceso BigQuery"] = verify_bigquery_access()
    results["Archivos de configuraci√≥n"] = verify_config_file()
    results["Directorios necesarios"] = create_directories()
    results["Prueba b√°sica"] = run_basic_test()
    
    # Generar reporte
    generate_setup_report(results)
    
    # Guardar reporte
    report_file = f"setup_report_{subprocess.run(['date', '+%Y%m%d_%H%M%S'], 
                                                capture_output=True, text=True).stdout.strip()}.json"
    
    with open(report_file, 'w') as f:
        json.dump({
            'timestamp': subprocess.run(['date'], capture_output=True, text=True).stdout.strip(),
            'results': results,
            'total_checks': len(results),
            'passed_checks': sum(results.values()),
            'success_rate': (sum(results.values())/len(results))*100
        }, f, indent=2)
    
    print(f"\nüìÑ Reporte guardado: {report_file}")

if __name__ == "__main__":
    main()
